const express = require('express');
const path = require('path');
const fs = require('fs');
const jsonServer = require('json-server');
const axios = require('axios');
const cors = require('cors');
const config = require('./config');

const app = express();
const PORT = process.env.PORT || 80;
const HOST = process.env.HOST || '0.0.0.0';

// Middleware básico
app.use(cors(config.cors));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// CRÍTICO: Verificar y servir frontend PRIMERO
const distPath = path.join(__dirname, '..', 'dist');
const indexPath = path.join(distPath, 'index.html');

console.log('🔍 Verificando archivos del frontend...');
console.log('📁 Working directory:', process.cwd());
console.log('📁 __dirname:', __dirname);
console.log('📁 Dist path:', distPath);
console.log('📄 Index.html exists:', fs.existsSync(indexPath));

if (fs.existsSync(distPath)) {
  // Servir archivos estáticos
  app.use(express.static(distPath));
  console.log('✅ Frontend configurado en:', distPath);
  
  // Listar archivos para debug
  try {
    const files = fs.readdirSync(distPath);
    console.log('📋 Archivos en dist:', files);
  } catch (err) {
    console.error('❌ Error listando archivos:', err);
  }
} else {
  console.error('❌ ERROR: Directorio dist no encontrado!');
  console.error('   Asegúrate de que el build del frontend se completó correctamente');
}

// Logging middleware
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path}`);
  next();
});

// Health check con más información
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok',
    server: 'express-unified',
    frontend: fs.existsSync(indexPath),
    frontendPath: distPath,
    port: PORT,
    timestamp: new Date().toISOString()
  });
});

// Debug endpoint
app.get('/api/debug/files', (req, res) => {
  const checkPath = (p, label) => {
    const exists = fs.existsSync(p);
    const stats = exists ? fs.statSync(p) : null;
    return {
      label,
      path: p,
      exists,
      isDirectory: stats?.isDirectory(),
      files: stats?.isDirectory() ? fs.readdirSync(p).slice(0, 10) : null
    };
  };
  
  res.json({
    cwd: process.cwd(),
    dirname: __dirname,
    env: {
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT,
      API_URL: process.env.API_URL
    },
    checks: [
      checkPath('/', 'Root'),
      checkPath('/app', 'App dir'),
      checkPath(path.join(__dirname, '..'), 'Parent dir'),
      checkPath(path.join(__dirname, '..', 'dist'), 'Dist dir'),
      checkPath(path.join(__dirname, '..', 'dist', 'index.html'), 'Index.html'),
      checkPath(path.join(__dirname, '..', 'public'), 'Public dir'),
      checkPath('./dist', 'Relative dist'),
    ]
  });
});

// ======================
// COPIAR TODAS LAS RUTAS API DE server.js AQUÍ
// ======================

// Test connection
app.post('/api/shopify/test-connection', async (req, res) => {
  console.log('🔌 Testing Shopify connection...');
  
  try {
    const { shopifyDomain, accessToken } = req.body;
    
    if (!shopifyDomain || !accessToken) {
      console.log('❌ Missing required fields');
      return res.status(400).json({ 
        success: false, 
        message: 'Dominio y Access Token son requeridos' 
      });
    }

    console.log(`📡 Connecting to: ${shopifyDomain}`);
    
    const shopUrl = `https://${shopifyDomain}/admin/api/2024-01/shop.json`;
    
    const response = await axios.get(shopUrl, {
      headers: {
        'X-Shopify-Access-Token': accessToken,
        'Content-Type': 'application/json',
      },
      timeout: 10000,
    });

    console.log('✅ Connection successful!');
    
    res.json({
      success: true,
      message: `Conectado exitosamente a ${response.data.shop.name}`,
      shop: response.data.shop,
    });
  } catch (error) {
    console.error('❌ Connection failed:', error.message);
    
    if (error.response) {
      res.status(error.response.status).json({
        success: false,
        message: error.response.data?.errors || error.message || 'Error al conectar con Shopify',
        error: error.response.data
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'No se pudo conectar con Shopify',
        error: error.message
      });
    }
  }
});

// [AGREGAR AQUÍ TODAS LAS DEMÁS RUTAS API]

// ======================
// JSON SERVER SETUP
// ======================

const dbPath = path.join(__dirname, '..', 'db.json');
console.log('📄 Database path:', dbPath);

if (fs.existsSync(dbPath)) {
  const router = jsonServer.router(dbPath);
  const middlewares = jsonServer.defaults({
    logger: true,
    readOnly: false,
    noCors: false
  });

  app.use(middlewares);
  app.use(router);
  console.log('✅ JSON Server configurado');
} else {
  console.error('❌ WARNING: db.json no encontrado en:', dbPath);
}

// IMPORTANTE: Catch-all para SPA debe ir AL FINAL
app.get('*', (req, res) => {
  // No aplicar a rutas API
  if (req.path.startsWith('/api')) {
    return res.status(404).json({ error: 'API endpoint not found' });
  }
  
  console.log(`🌐 SPA route requested: ${req.path}`);
  
  if (fs.existsSync(indexPath)) {
    console.log('✅ Serving index.html');
    res.sendFile(indexPath);
  } else {
    console.error('❌ index.html not found at:', indexPath);
    res.status(404).send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>Error - Frontend no encontrado</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .error { background: #fee; padding: 20px; border-radius: 5px; }
          code { background: #f4f4f4; padding: 2px 5px; }
        </style>
      </head>
      <body>
        <div class="error">
          <h1>Error: Frontend no encontrado</h1>
          <p>El build del frontend no está disponible.</p>
          <p>Path esperado: <code>${indexPath}</code></p>
          <hr>
          <p>Para debug, visita: <a href="/api/debug/files">/api/debug/files</a></p>
        </div>
      </body>
      </html>
    `);
  }
});

// Error handler
app.use((err, req, res, next) => {
  console.error('💥 Server Error:', err);
  res.status(500).json({ 
    error: 'Internal Server Error',
    message: err.message 
  });
});

// ======================
// START SERVER
// ======================

app.listen(PORT, HOST, () => {
  const PUBLIC_URL = process.env.API_URL || `http://${HOST}:${PORT}`;
  
  console.log('');
  console.log('====================');
  console.log('🚀 Server is running!');
  console.log('====================');
  console.log(`📡 Host: ${HOST}`);
  console.log(`📡 Port: ${PORT}`);
  console.log(`🌐 URL: ${PUBLIC_URL}`);
  console.log(`📁 Frontend: ${fs.existsSync(indexPath) ? '✅ Available' : '❌ NOT FOUND'}`);
  console.log(`📄 Database: ${fs.existsSync(dbPath) ? '✅ Available' : '❌ NOT FOUND'}`);
  console.log('');
  console.log('📋 Debug endpoints:');
  console.log(`  GET  ${PUBLIC_URL}/health`);
  console.log(`  GET  ${PUBLIC_URL}/api/debug/files`);
  console.log('');
  
  if (!fs.existsSync(indexPath)) {
    console.log('⚠️  WARNING: Frontend build not found!');
    console.log('   The server is running but the frontend is not available.');
    console.log('   Please check that the Docker build completed successfully.');
  }
  
  console.log('Press Ctrl+C to stop the server');
  console.log('====================');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n👋 Shutting down server...');
  process.exit(0);
});
